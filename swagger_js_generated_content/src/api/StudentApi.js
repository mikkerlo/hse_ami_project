/**
 * AMI
 * fuck the cs hse
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ComponentsschemasServerErrorResponse', 'model/Group', 'model/HomeTask', 'model/Student', 'model/StudentPost'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ComponentsschemasServerErrorResponse'), require('../model/Group'), require('../model/HomeTask'), require('../model/Student'), require('../model/StudentPost'));
  } else {
    // Browser globals (root is window)
    if (!root.Ami) {
      root.Ami = {};
    }
    root.Ami.StudentApi = factory(root.Ami.ApiClient, root.Ami.ComponentsschemasServerErrorResponse, root.Ami.Group, root.Ami.HomeTask, root.Ami.Student, root.Ami.StudentPost);
  }
}(this, function(ApiClient, ComponentsschemasServerErrorResponse, Group, HomeTask, Student, StudentPost) {
  'use strict';

  /**
   * Student service.
   * @module api/StudentApi
   * @version 1.0.0
   */

  /**
   * Constructs a new StudentApi. 
   * @alias module:api/StudentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPet operation.
     * @callback module:api/StudentApi~addPetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Student>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get students data
     * Returns &#x60;count&#x60; students from offset &#x60;offset&#x60;. 
     * @param {Number} offset Offset to start with 
     * @param {Number} count Number of returned records 
     * @param {module:api/StudentApi~addPetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Student>}
     */
    this.addPet = function(offset, count, callback) {
      var postBody = null;

      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling addPet");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling addPet");
      }


      var pathParams = {
      };
      var queryParams = {
        'offset': offset,
        'count': count,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Student];

      return this.apiClient.callApi(
        '/student', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentIdGet operation.
     * @callback module:api/StudentApi~studentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Student} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id ID of student to return
     * @param {module:api/StudentApi~studentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Student}
     */
    this.studentIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling studentIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Student;

      return this.apiClient.callApi(
        '/student/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentIdPatch operation.
     * @callback module:api/StudentApi~studentIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some info about student
     * Gets dictionary with student&#39;s description, then updates these fields in  database. 
     * @param {Number} id ID of student to return
     * @param {module:model/StudentPost} data New data to store
     * @param {module:api/StudentApi~studentIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.studentIdPatch = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling studentIdPatch");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling studentIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/student/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentPost operation.
     * @callback module:api/StudentApi~studentPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user 
     * Creates new user in system 
     * @param {module:model/StudentPost} data New student data.  
     * @param {module:api/StudentApi~studentPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.studentPost = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling studentPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/student', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentStudentIdDeadlinesGet operation.
     * @callback module:api/StudentApi~studentStudentIdDeadlinesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HomeTask>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} studentId ID of student to return
     * @param {module:api/StudentApi~studentStudentIdDeadlinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HomeTask>}
     */
    this.studentStudentIdDeadlinesGet = function(studentId, callback) {
      var postBody = null;

      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling studentStudentIdDeadlinesGet");
      }


      var pathParams = {
        'student_id': studentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [HomeTask];

      return this.apiClient.callApi(
        '/student/{student_id}/deadlines', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentStudentIdGroupsGet operation.
     * @callback module:api/StudentApi~studentStudentIdGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} studentId ID of student to return
     * @param {module:api/StudentApi~studentStudentIdGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    this.studentStudentIdGroupsGet = function(studentId, callback) {
      var postBody = null;

      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling studentStudentIdGroupsGet");
      }


      var pathParams = {
        'student_id': studentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Group];

      return this.apiClient.callApi(
        '/student/{student_id}/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
