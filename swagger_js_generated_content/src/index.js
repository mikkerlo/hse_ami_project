/**
 * AMI
 * fuck the cs hse
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.4
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/File', 'model/Group', 'model/HomeTask', 'model/Material', 'model/Notify', 'model/Student', 'model/StudentJar', 'api/DeadlinesApi', 'api/GroupApi', 'api/StudentApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/File'), require('./model/Group'), require('./model/HomeTask'), require('./model/Material'), require('./model/Notify'), require('./model/Student'), require('./model/StudentJar'), require('./api/DeadlinesApi'), require('./api/GroupApi'), require('./api/StudentApi'));
  }
}(function(ApiClient, File, Group, HomeTask, Material, Notify, Student, StudentJar, DeadlinesApi, GroupApi, StudentApi) {
  'use strict';

  /**
   * fuck_the_cs_hse.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Ami = require('index'); // See note below*.
   * var xxxSvc = new Ami.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Ami.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Ami.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Ami.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The File model constructor.
     * @property {module:model/File}
     */
    File: File,
    /**
     * The Group model constructor.
     * @property {module:model/Group}
     */
    Group: Group,
    /**
     * The HomeTask model constructor.
     * @property {module:model/HomeTask}
     */
    HomeTask: HomeTask,
    /**
     * The Material model constructor.
     * @property {module:model/Material}
     */
    Material: Material,
    /**
     * The Notify model constructor.
     * @property {module:model/Notify}
     */
    Notify: Notify,
    /**
     * The Student model constructor.
     * @property {module:model/Student}
     */
    Student: Student,
    /**
     * The StudentJar model constructor.
     * @property {module:model/StudentJar}
     */
    StudentJar: StudentJar,
    /**
     * The DeadlinesApi service constructor.
     * @property {module:api/DeadlinesApi}
     */
    DeadlinesApi: DeadlinesApi,
    /**
     * The GroupApi service constructor.
     * @property {module:api/GroupApi}
     */
    GroupApi: GroupApi,
    /**
     * The StudentApi service constructor.
     * @property {module:api/StudentApi}
     */
    StudentApi: StudentApi
  };

  return exports;
}));
